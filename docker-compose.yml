version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
      
  kafka:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  kafka-viewer:
    image: provectuslabs/kafka-ui:v0.7.2
    depends_on:
      - kafka
    environment:
        KAFKA_CLUSTERS_0_NAME: local
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
        KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8081:8080"

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - "9870:9870" # Web UI for HDFS NameNode
      - "9000:9000" # RPC port
    environment:
      - CLUSTER_NAME=hadoop-cluster
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=false
    # volumes:
    #   - namenode-data:/hadoop/dfs/name

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - HDFS_CONF_dfs_datanode_hostname=datanode
      - HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=false
    depends_on:
      - namenode
    # volumes:
      # - datanode-data:/hadoop/dfs/data

  postgres:
    image: postgres:17.2
    container_name: postgres
    env_file:
      - ./.env
    ports:
      - "5433:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  airflow-webserver:
    image: airflow-custom:v3
    container_name: airflow-webserver
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW_CONN_POSTGRES_DEFAULT=${AIRFLOW_CONN_POSTGRES_DEFAULT}
      - AIRFLOW_CONN_KAFKA_DEFAULT=kafka://kafka:9093
      - AIRFLOW_CONN_HDFS_DEFAULT=hdfs://namenode:9870
      - AIRFLOW_CONN_SPARK_DEFAULT=spark://spark-master:7077
    depends_on:
      - postgres
      - kafka
      - namenode
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./raw_data:/opt/airflow/raw_data
    ports:
      - "8080:8080"
    command: >
      bash -c "airflow db migrate &&
                airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
                airflow webserver"

  airflow-scheduler:
    image: airflow-custom:v3
    container_name: airflow-scheduler
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW_CONN_POSTGRES_DEFAULT=${AIRFLOW_CONN_POSTGRES_DEFAULT}
      - AIRFLOW_CONN_KAFKA_DEFAULT=kafka://kafka:9093
      - AIRFLOW_CONN_HDFS_DEFAULT=hdfs://namenode:9870  
      - AIRFLOW_CONN_SPARK_DEFAULT=spark://spark-master:7077
    depends_on:
      - postgres
      - kafka
      - namenode
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./raw_data:/opt/airflow/raw_data
    command: >
      bash -c "airflow scheduler"
    restart: always

  spark-master:
    image: bitnami/spark:3.5.4
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_IP=spark-master
    ports:
      - "7077:7077"  # Spark Master Port
      - "18080:8080"  # Spark Web UI
    volumes:
      - ./raw_data:/opt/spark/raw_data
      - ./spark_jobs:/opt/spark/jobs

  spark-worker:
    image: bitnami/spark:3.5.4
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
    depends_on:
      - spark-master
    ports:
      - "18081:8081"  # Spark Worker UI
    volumes:
      - ./raw_data:/opt/spark/raw_data

#   jupyter:
#     image: jupyter/scipy-notebook:python-3.11
#     ports:
#       - "8888:8888"
#     volumes:
#       - ./notebooks:/home/jovyan/work

#   grafana:
#     image: grafana/grafana:latest
#     ports:
#       - "3000:3000"
#     volumes:
#       - grafana-data:/var/lib/grafana

#   kibana:
#     image: docker.elastic.co/kibana/kibana:8.17.0
#     ports:
#       - "5601:5601"
#     environment:
#       ELASTICSEARCH_HOSTS: http://localhost:9200

# volumes:
#   grafana-data:
